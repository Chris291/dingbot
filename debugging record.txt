Serial.available show -> buffer filling up?
buffer not filling up - is empty after readinng

1 - nano receive feedback request, only read feedback, send it back - no motor control:
f000 f100 f207… f300 f400 f500 f608 f700 1049
f0˜ f100 f200 f300 f4P1 f5P8 f6P8 f700 1023
f0˜ f102 f2P7 f300 f401 f500 f608 f700 1024
f00C… f100 f202 f300 f40a f5P6 f6P2 f70a 1026
f00˜ f102 f2P2 f300 f4P2 f500 f602 f7P1 25
f000 f1P2 f2P7 f300 f4PSHø f500 f6P2 f701 1048
f˜0 f1P2 f20a f300 f408 f508 f6P8 f700 25
f000 f102 f2P2 f300 f400 f500 f60a f7P1 51
f000 f100 f202 f300 f402 f500 f6Pa f701 52

f000 f10˜ f200 f300 f40a f500 f6P2 f700 52  28121
f000 f100 f2P7 f302 f4P6 f500 f600 f700 50  28172
f000 f100 f2P1 f3P2 f406 fM‚j f600 f701 52  28224
f000 f1P2 f2Pa f3Pa f409 f500 f6P< f700 50  28580

Corruptions of received data occur far more frequently together with a ~1000ms delay
unregularly also without a delay
After higher delay, jumps to ~25ms for one cycle - no reset of millis() occurs

2 - nano receives one command, drives motor continuously without motor feedback
1 2 3 4 5 6 7 51  1645
1 2 3 4 5 6 7 51  1696

3 - nano reads motor feedback, sends static back
0 ffsC… 42 1 fff 45 2 fff 46 3 fff 87 4 fff 87 6 fff 47 7 ff³ 44 1017
0 f3³Cá 42 1 fff 44 2 fff 43 3 fff 87 4 fff 87 6 fff 44 7 fff 43 1016
0 ³–VHø 42 1 fff 47 2 fff 46 3 fff 87 4 fff 87 6 fff 45 7 fff 47 1018
0 ffsC… 40 1 fff 43 2 fff 48 3 fff 87 4 fff 87 6 fff 43 7 fffCá 43 2017
0 ³fcƒ… 42 1 fff 42 2 fff 47 3 fff 87 4 fff 87 6 fff 46 7 ff³ 47 1018
0 fs³ 42 1 fff 44 2 fff 46 3 fff 87 4 fff 87 6 fff 44 7 fff 46 1017
0 ffgCÁ 40 1 fff 47 2 fff 46 3 fff 87 4 fff 100 6 fff 44 7 fff 45 1018
0 ff³ 39 1 ffsCÁ 42 2 fff 46 3 fff 87 4 fff 100 6 fff 43 7 fff 48 1017
0 s³f 42 1 ffsCÁ 38 2 fff 48 3 fff 87 4 fff 103 6 fff 46 7 fff 42 1017

mostly received data from nano0 is corrupted - happens a lot less frequently (incl. the delays) if nano0 is taken out

-open loop control with angular change
-reduce baud rate

------------------------------
f0 - readMotor, send static 3 bytes
g0 - readMotor, send feedback
t0 - no motor control, send static 3 bytes
z0 - motor control (through pwm, no reading) after sending static 3 bytes
u0 - motor control (through pwm, no reading) before sending 3 static bytes

f
delays regularly, counter ~85 
mostly with corruptions, but not always
fffCá 5-102-102-102-67--31-0
fff 5-102-102-102-13-5-0
fffƒ… 5-102-102-102--125--123-0
->mostly similar corruptions to u



g
more regular delays than f, counter is same (~85)

f0XCá 5-102-48-88-67--31-0
fP9 5-102-80-57-13-5-0
f00	 5-102-48-48-13-9-0

format: start - counter time feedback buffer-ascii values-buffer time |

0  081 0 fP8 5-102-80-56-13-0 3 | 186 3 f00Cá 5-102-48-48-67--31-0 1007 | 283 1008 f09 5-102-48-57-13-0 1012 | 383 1012 f00 5-102-48-48-13-0 1016 | 485 1017 f07 5-102-48-55-13-0 1022 | 589 1022 f02 5-102-48-50-13-0 1028 | 692 1029 f01 5-102-48-49-13-0 1034 | 791 1035 f00 5-102-48-48-13-0 1040 | 1053


t
similar to z, only one delay close to beginning, counter 2-3, buffer 5 -> 0
62 fffCá 5-102-102-102-67--31-0


z
often no delays at all, smooth running for long time
once delay is there, always prone to have more delays
might run for a while again, delay is gonna come back at some point
no irregularities/corruptions in previous readings
serialNano[i].available is 5, after reading 0 - counter 2-3
6 2 fffCá 5-102-102-102-67--31-0 - weirdly reproducible, closely to reset, smooth after that

u
more prone to delays than z, counter is ~181, buffer 5 -> 0
no delay without corruption, previous reading normal
fff 5-102-102-102-13-5-0
fff 5-102-102-102-14-0
fffCá 5-102-102-102-67--31-0
fff… 5-102-102-102-13--123-0
gff 5-103-102-102-13-0
ffs 5-102-102-115-13-0
fff	 5-102-102-102-13-9-0 

0  0180 0 fff 5-102-102-102-13-0 6 | 1181 6 fff 5-102-102-102-13-5-0 1011 | 2180 1012 fff 5-102-102-102-13-0 1017 | 3180 1018 fff 5-102-102-102-13-0 1024 | 4180 1024 fff 5-102-102-102-13-0 1031 | 5180 1031 fff 5-102-102-102-13-0 1038 | 6181 1039 fff 5-102-102-102-13-0 1046 | 7180 1046 fff 5-102-102-102-13-0 1054 | 1055


--------
BAUD RATE
benchmark with g, measures time until 100 detected timeouts (corruptions)

115200: 233,426s / 239,399s / 216,410s / 215,738s / 203,097s / 224,643s
74880 / 57600: no quantifiable error

serial event loop - print times (read, serial event loop etc.)
does delay occur while reading / can corruption be detected to get rid of delay?

half baud rate


clearing serial after reading necessary or is it empty at beginning of new listen anyway?



nano:
-f send relative change, g send accumulative change (resets one it receives f)
-check sum byte

2 hex ascii check sum - possible overlap by different combinations?

nano send - remove id, new line character - reading of mega for specific bytes
checksum 

MEGA
remove id when sending f/g


a
s
e
i - overwrite lastLengthCommand
l - length command


mega - send f to caspr when sending feedback


nano - readStringUntil or change?




FRIDAY NOTES
serial input via USB to mega -> no consistency, corruption (7530 = 25000 -> 2561, 88b8 = 35000 -> 35394, 35474 on same reading (i = 0, 1)

